package accountancy.repository.csv;

import accountancy.model.base.*;
import accountancy.repository.BaseRepository;
import accountancy.repository.CsvImportRepository;
import com.opencsv.CSVIterator;
import com.opencsv.CSVReader;

import java.io.File;
import java.io.FileReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class CsvRepository {

    private File                file;
    private Account             account;
    private BaseRepository      baseRepository;
    private CsvImportRepository csvRepository;

    public CsvRepository(BaseRepository baseRepository, CsvImportRepository csvRepository, File file, Account account) {

        this.file = file;
        this.account = account;
        this.baseRepository = baseRepository;
        this.csvRepository = csvRepository;
    }

    /**
     * Import any csv file, depending of csv structure
     */
    public void doImport() {

        baseRepository.transactions().startTransaction();
        try {
            //noinspection deprecation
            CSVIterator iterator = new CSVIterator(new CSVReader(new FileReader(file), ';'));
            String[]    line     = iterator.next();
            if (line.length == 5) {
                doImportCA(iterator);
            }
            else if (line.length == 9) {
                doImportMyFile(iterator);
            }
            else {
                throw new Exception("Invalid CSV file");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        baseRepository.transactions().commit();
    }

    /**
     * Import a csv with minimum datas (typically generated by external bank interface)
     *
     * @param iterator CSVIterator
     *
     * @throws ParseException if csv is not valid
     */
    private void doImportCA(CSVIterator iterator) throws ParseException {

        baseRepository.accounts().startTransaction();
        baseRepository.banks().startTransaction();
        baseRepository.currencies().startTransaction();
        baseRepository.types().startTransaction();
        baseRepository.categories().startTransaction();

        String[] line;
        String   dateField;
        String   textField;
        String   debitField;
        String   creditField;
        double   amount;
        Date     date;
        while (iterator.hasNext()) {

            line = iterator.next();
            //
            if (line.length > 1) {

                dateField = line[0].trim();
                textField = line[1].trim();
                debitField = line[2].trim();
                creditField = line[3].trim();

                date = (new SimpleDateFormat("dd/MM/yyyy")).parse(dateField);

                amount = this.getAmount(debitField, creditField);

                if (!csvRepository.csvLineHasBeenImported(dateField, textField, amount)) {

                    Category    category    = (Category) baseRepository.categories().getOne();
                    SubCategory subCategory = (SubCategory) category.subCategories().getOne();

                    Transaction transaction = baseRepository.create(
                        new Transaction(
                            0, textField.substring(0, Math.min(textField.length(), 250)), amount, date,
                            account, category, subCategory
                        )
                    );

                    csvRepository.saveCsvImport(dateField, textField, amount, transaction);
                }
            }
        }

        baseRepository.accounts().commit();
        baseRepository.banks().commit();
        baseRepository.currencies().commit();
        baseRepository.types().commit();
        baseRepository.categories().commit();
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    /**
     * Import a csv file formatted with all datas (typically generated by equivalent application)
     *
     * @param iterator CSVIterator
     *
     * @throws ParseException if csv is not valid
     */
    private void doImportMyFile(CSVIterator iterator) throws ParseException {


        String[] line;
        String   dateField;
        String   textField;
        String   accountField;
        String   categoryField;
        String   subCategoryField;
        String   currencyField;
        String   typeField;
        String   debitField;
        String   creditField;
        double   amount;
        Date     date;

        while (iterator.hasNext()) {

            line = iterator.next();
            if (line.length > 1) {

                dateField = line[0];
                accountField = line[1];
                categoryField = line[2];
                subCategoryField = line[3];
                textField = line[4];
                debitField = line[5];
                creditField = line[6];
                currencyField = line[7];
                typeField = line[8];

                date = (new SimpleDateFormat("dd/MM/yy")).parse(dateField);

                amount = this.getAmount(debitField, creditField);

                Category category = (Category) baseRepository.categories().getOne(categoryField);
                if (category == null) {
                    category = baseRepository.create(new Category(0, categoryField));
                }
                SubCategory subCategory = (SubCategory) category.subCategories().getOne(subCategoryField);
                if (subCategory == null) {
                    subCategory = baseRepository.create(
                        new SubCategory(0, subCategoryField), category);
                }

                Account entryAccount = (Account) baseRepository.accounts().getOne(accountField);
                if (entryAccount == null) {
                    String[] accountAndBank = accountField.split(" – ");
                    if (accountAndBank.length == 2) {

                        String bankTitle = accountAndBank[0];

                        Bank bank = (Bank) baseRepository.banks().getOne(bankTitle);
                        if (bank == null) {
                            bank = baseRepository.create(new Bank(0, bankTitle));
                        }

                        Currency currency = (Currency) baseRepository.currencies().getOne(currencyField);
                        if (currency == null) {
                            currency = baseRepository.create(new Currency(0, currencyField));
                        }

                        Type type = (Type) baseRepository.types().getOne(typeField);
                        if (type == null) {
                            type = baseRepository.create(new Type(0, typeField));
                        }

                        entryAccount = baseRepository.create(
                            new Account(0, accountField, currency, bank, type)
                        );
                    }
                    else {
                        entryAccount = account;
                    }
                }


                baseRepository.create(
                    new Transaction(
                        0, textField.substring(0, Math.min(textField.length(), 250)), amount, date,
                        entryAccount, category, subCategory
                    )
                );
            }
        }

    }

    private double getAmount(String debitField, String creditField) {

        if (!debitField.trim().isEmpty()) {
            return -getDoubleValueOf(debitField);
        }
        if (!creditField.trim().isEmpty()) {
            return getDoubleValueOf(creditField);
        }
        return 0;
    }

    private Double getDoubleValueOf(String str) {

        return Double.valueOf(
            str.trim()
               .replace(" ", "")
               .replace("'", "")
               .replace("‘", "")
               .replace(",", ".")
        );
    }
}
